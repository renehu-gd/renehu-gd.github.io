{"version":3,"file":"static/js/583.7d85a0b4.chunk.js","mappings":"0bA2CMA,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GAsN2B,OAtN3BA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KAoBFC,MAAQ,CACJC,WAAW,EACXC,UAAU,EACVC,qBAAqB,GAHjB,EAiFRC,kBAAoB,WAChB,IAAWC,EAAX,iBAAoB,EAAKC,OACjBH,EAAwB,EAAKH,MAA7BG,oBAER,OAAO,SAACI,EAAA,GAAD,kBAAaF,GAAb,IAAmBF,oBAAqBA,MAClD,EAEDK,aAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAc,wGACJ,EAAKC,iBADD,cAEJC,EAAW,CAAET,WAAW,GAFpB,mBAKgCU,EAAAA,EAAAA,MALhC,gBAKER,EALF,EAKEA,oBAERO,EAASP,oBAAsBA,EAE3BA,IACAO,EAASE,uBAAwB,GAV/B,kDAaNF,EAASR,UAAW,EAbd,yBAeN,EAAKW,SAASH,GAfR,+EAmBdI,aAAe,WACX,MAA6D,EAAKR,MAA1DS,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,SAAUC,EAA9C,EAA8CA,IAAKC,EAAnD,EAAmDA,MAE/CJ,IACAK,EAAAA,EAAAA,IAAmBL,GAGnBI,IACAE,EAAAA,EAAAA,MAAuBF,GAG3B,IAAMG,EAAiBD,EAAAA,EAAAA,MAAAA,cACjBE,EAAcC,EAAAA,GAAaF,IACjCG,EAAAA,EAAAA,IAAeF,GAEXP,KACAU,EAAAA,EAAAA,IAAiBV,IACjBW,EAAAA,EAAAA,IAAoB,CAAEX,cAAAA,EAAeO,YAAAA,KAGrCN,IACAW,EAAAA,EAAAA,IAAYX,EAASY,eAGrBX,KACAY,EAAAA,EAAAA,IAAOZ,EAAIW,eACXR,EAAAA,EAAAA,YAA6BH,EAAIW,eACjCE,EAAAA,EAAAA,QAEP,EAEDtB,gBAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAiB,+FACPuB,EAAyB,CAC3BC,oBAAqB,CACjB,QAAS,kBAAM,qCAEnBC,mBAAmB,GALV,UAOUC,EAAAA,EAAAA,IAAiBH,GAP3B,UAOTI,EAPS,OAWY,uBAAX,QAAV,EAAAA,SAAA,eAAYC,MAXH,iCAYUF,EAAAA,EAAAA,IAAiBH,GAZ3B,OAYTI,EAZS,oDAgBjBE,kBAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAmB,2FACPnB,EAAU,EAAKb,MAAfa,MADO,UAEToB,EAAAA,EAAAA,GAAUpB,GAFD,6CAKnBqB,wBAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAyB,+FACfC,EAAAA,EAAAA,GAAiB,CACnBC,cAAeC,EAAAA,IAFE,6CAMzBC,yBAA2B,WACvB,EAAKC,yBACL,IAAQC,EAAmB,EAAKxC,MAAxBwC,eAER,GAAKA,EAAL,CAKA,IACMC,EAAQC,aAAW,iBAAC,oGACOF,IADP,QAChBG,EADgB,UAIlB7B,EAAAA,EAAAA,IAAmB6B,GAJD,2CADEC,MAS5B,OAAO,WACHC,cAAcJ,MAErB,EAEDF,uBAAyB,WACjB,EAAKO,mBACL,EAAKA,qBAEZ,EAEDC,QAAU,qBAnHT,OAmHS,8BA5LV,WACI,MAAgCC,KAAKtD,MAA7BC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,SACXqD,EAAsBD,KAAKhD,MAA3BiD,kBAER,OACI,gBAAKC,GAAG,OAAR,UACI,SAAC,EAAAC,cAAD,WACI,SAACC,EAAA,EAAD,CACIC,cAAe,CACXC,OAAOC,EAAAA,EAAAA,IACH,+BAEJC,KAAKD,EAAAA,EAAAA,IAAe,6BACpBE,YAAYF,EAAAA,EAAAA,IACR,gCAEJG,WAAW,GAAD,OAAKV,KAAKD,QAAV,oBACVY,eAAe,EACfC,iBAAiBC,EAAAA,EAAAA,GACbC,EAAAA,EAAAA,uBAGRC,YAAa,CACTC,iBAAiB,GAAD,OAAKhB,KAAKD,QAAV,2BAEpBkB,YAAaC,EAAAA,EAAAA,QAlBjB,UAoBI,SAACC,EAAA,EAAD,CACIT,WAAU,UAAKV,KAAKD,QAAV,aACVqB,mBAAoB,CAChBd,OAAOC,EAAAA,EAAAA,IAAe,uBAE1B5D,UAAWA,EACXC,SAAUA,EANd,UAQI,UAAC,EAAAyE,OAAD,YACI,SAAC,EAAAC,MAAD,CACIC,KAAK,KACLC,QAASxB,KAAKlD,uBAElB,SAAC,EAAAwE,MAAD,CACIC,KAAML,EAAAA,EAAAA,QACNM,QAASxB,KAAKlD,uBAElB,SAAC,EAAAwE,MAAD,CACIC,KAAML,EAAAA,EAAAA,KACNM,SACI,SAACC,EAAA,EAAD,CAAMC,UAAWzB,OAGzB,SAAC,EAAAqB,MAAD,CACIC,KAAML,EAAAA,EAAAA,sBACNM,SAAS,SAACG,EAAA,EAAD,mBAQxC,+BAED,WACI3B,KAAKxC,eACLwC,KAAK9C,cACL8C,KAAKhB,mBACLgB,KAAKd,yBACLc,KAAKF,kBAAoBE,KAAKV,6BACjC,kCAED,YACIsC,EAAAA,EAAAA,MACA5B,KAAKT,6BACR,EAnGC9C,CAAuBoF,EAAAA,eAAvBpF,EAcKqF,aAAe,CAClBnE,SAAUoE,EAAAA,GAAAA,KACVlE,MAAOmE,EAAAA,GAAAA,QACPpE,IAAKqE,EAAAA,GAAAA,MAwMb,QCtPA,EAdwB,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MACjB,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/BJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCexB,IAAMQ,EAAcC,SAASC,eAAe,QAC/BC,EAAAA,WAAoBH,GAE5BI,QACD,UAAC,eAAD,YACI,iDACA,SAAC,EAAD,CACIrF,YAAY,cACZI,MAAM,UACNkF,kBAAkB,oBAClBrF,cAAc,QACdE,IAAI,KACJD,SAAS,OACTsC,kBAAkB,cAQ9B+C,KAgBsB,WAClB,IACMC,EAAON,SAASO,qBAAqB,QAAQ,GAC7CC,EAASR,SAASS,cAAc,UACtCD,EAAOE,UAjBU,iWAkBjBJ,EAAKK,aAAaH,EAAQF,EAAKM,YAiB/BC,GAfkB,WAClB,IACMC,EAAOd,SAASO,qBAAqB,QAAQ,GAE7CC,EAASR,SAASS,cAAc,YAChCM,EAASf,SAASS,cAAc,UACtCM,EAAOC,IAlBU,qQAmBjBD,EAAOE,OAAS,IAChBF,EAAOG,MAAQ,IACfH,EAAOI,MAAMC,QAAU,OACvBL,EAAOI,MAAME,WAAa,SAC1Bb,EAAOc,YAAYP,GACnBD,EAAKH,aAAaH,EAAQM,EAAKF,YAI/BW","sources":["DDSwitchModule.js","reportWebVitals.js","bootstrap.js"],"sourcesContent":["import { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    initTranslations,\n    getTranslation,\n} from '@Green-Dot-Corporation/eureka-lib-i18n-utils';\nimport {\n    resetAuthorization,\n    initializeAppConfig,\n} from '@Green-Dot-Corporation/web-app-utils-api-lib';\nimport {\n    LoadingFlow,\n    EurekaErrorBoundary,\n} from '@Green-Dot-Corporation/eureka-ui-loading';\nimport {\n    initializeImages,\n    getImagePathForKey,\n} from '@Green-Dot-Corporation/eureka-ui-media';\nimport { Routes, Route, BrowserRouter } from 'react-router-dom';\nimport Landing from './components/landing/Landing';\nimport Bump from './components/bump/Bump';\nimport BumpAttemptDeclined from './components/bump/BumpAttemptDeclined';\n// Services\nimport { getDDFeatureConfig } from './services/DDSwitchService';\n// Utils\nimport { importCSS } from './utils/CSSImport';\nimport {\n    cleanData as cleanGatewayHttpClientData,\n    setApplicationId,\n    setEnv,\n    setPrefixAPIUrl,\n} from './utils/gatewayHttpClient';\nimport { setPlatform, setProgramCode } from './utils/urlHelper';\n// Constants\nimport GlobalSettings from './utils/GlobalSettings';\nimport { BRAND, PLATFORM, ENVIRONMENT, PROGRAM_CODE } from './const/urlConst';\nimport { ROUTES_CONSTS } from './const/routesConst';\nimport imageLibrary, { IMAGE_KEYS } from './media/images/imageLibrary';\n// Styles\nimport './styles/dd-switch-module.scss';\n\nconst REFRESH_TOKEN_INTERVAL_SECONDS = 9.5 * 60;\n\nclass DDSwitchModule extends PureComponent {\n    static propTypes = {\n        contextCls: PropTypes.string,\n        accountIdentifier: PropTypes.string,\n        accessToken: PropTypes.string,\n        brand: PropTypes.string,\n        applicationId: PropTypes.string,\n        env: PropTypes.string,\n        onRefreshToken: PropTypes.func,\n        platform: PropTypes.string,\n        // String containing the CSS selector for rendering Transact inside an iframe\n        transactContainer: PropTypes.string,\n    };\n\n    static defaultProps = {\n        platform: PLATFORM.BAAS,\n        brand: BRAND.GO2BANK,\n        env: ENVIRONMENT.PROD,\n    };\n\n    state = {\n        isLoading: true,\n        hasError: false,\n        isAutoSwitchEnabled: false,\n    };\n\n    render() {\n        const { isLoading, hasError } = this.state;\n        const { transactContainer } = this.props;\n\n        return (\n            <div id=\"root\">\n                <BrowserRouter>\n                    <EurekaErrorBoundary\n                        calloutConfig={{\n                            title: getTranslation(\n                                'errorBoundary.default.title',\n                            ),\n                            msg: getTranslation('errorBoundary.default.msg'),\n                            buttonText: getTranslation(\n                                'errorBoundary.default.button',\n                            ),\n                            contextCls: `${this.baseCls}__error-boundary`,\n                            isPageHeading: false,\n                            illustrationSrc: getImagePathForKey(\n                                IMAGE_KEYS.WARNING_ILLUSTRATION,\n                            ),\n                        }}\n                        modalConfig={{\n                            dialogContextCls: `${this.baseCls}__error-boundary-modal`,\n                        }}\n                        redirectURL={ROUTES_CONSTS.LANDING}\n                    >\n                        <LoadingFlow\n                            contextCls={`${this.baseCls}__loading`}\n                            loadingStateLocale={{\n                                title: getTranslation('loadingState.title'),\n                            }}\n                            isLoading={isLoading}\n                            hasError={hasError}\n                        >\n                            <Routes>\n                                <Route\n                                    path=\"/*\"\n                                    element={this.renderLandingPage()}\n                                />\n                                <Route\n                                    path={ROUTES_CONSTS.LANDING}\n                                    element={this.renderLandingPage()}\n                                />\n                                <Route\n                                    path={ROUTES_CONSTS.BUMP}\n                                    element={\n                                        <Bump container={transactContainer} />\n                                    }\n                                />\n                                <Route\n                                    path={ROUTES_CONSTS.BUMP_ATTEMPT_DECLINED}\n                                    element={<BumpAttemptDeclined />}\n                                />\n                            </Routes>\n                        </LoadingFlow>\n                    </EurekaErrorBoundary>\n                </BrowserRouter>\n            </div>\n        );\n    }\n\n    componentDidMount() {\n        this.initialSetup();\n        this.fetchConfig();\n        this.applyDesignToken();\n        this.initializeImageLibrary();\n        this.refreshTokenTimer = this.initialRefreshTokenTimer();\n    }\n\n    componentWillUnmount() {\n        cleanGatewayHttpClientData();\n        this.clearRefreshTokenTimer();\n    }\n\n    renderLandingPage = () => {\n        const { ...rest } = this.props;\n        const { isAutoSwitchEnabled } = this.state;\n\n        return <Landing {...rest} isAutoSwitchEnabled={isAutoSwitchEnabled} />;\n    };\n\n    fetchConfig = async () => {\n        await this.initI18nConfig();\n        const newState = { isLoading: false };\n\n        try {\n            const { isAutoSwitchEnabled } = await getDDFeatureConfig();\n\n            newState.isAutoSwitchEnabled = isAutoSwitchEnabled;\n\n            if (isAutoSwitchEnabled) {\n                newState.shouldShowLandingPage = true;\n            }\n        } catch (e) {\n            newState.hasError = true;\n        } finally {\n            this.setState(newState);\n        }\n    };\n\n    initialSetup = () => {\n        const { accessToken, applicationId, platform, env, brand } = this.props;\n\n        if (accessToken) {\n            resetAuthorization(accessToken);\n        }\n\n        if (brand) {\n            GlobalSettings.Brand = brand;\n        }\n\n        const upperCaseBrand = GlobalSettings.Brand.toUpperCase();\n        const programCode = PROGRAM_CODE[upperCaseBrand];\n        setProgramCode(programCode);\n\n        if (applicationId) {\n            setApplicationId(applicationId);\n            initializeAppConfig({ applicationId, programCode });\n        }\n\n        if (platform) {\n            setPlatform(platform.toUpperCase());\n        }\n\n        if (env) {\n            setEnv(env.toUpperCase());\n            GlobalSettings.Environment = env.toUpperCase();\n            setPrefixAPIUrl();\n        }\n    };\n\n    initI18nConfig = async () => {\n        const initTranslationsOption = {\n            defaultTranslations: {\n                'en-US': () => import('./i18n/en-us.json'),\n            },\n            shouldLoadStrings: false,\n        };\n        let i18nResult = await initTranslations(initTranslationsOption);\n        // Add this logic to avoid the i18n false positive return. The initTranslations will return promise successfully even the i18n is not ready.\n        // However in this case, the i18n name will be 'bound bound value' to indicate the load has not been ready. So in this case, we need to re-init i18n\n\n        if (i18nResult?.name === 'bound bound value') {\n            i18nResult = await initTranslations(initTranslationsOption);\n        }\n    };\n\n    applyDesignToken = async () => {\n        const { brand } = this.props;\n        await importCSS(brand);\n    };\n\n    initializeImageLibrary = async () => {\n        await initializeImages({\n            defaultImages: imageLibrary,\n        });\n    };\n\n    initialRefreshTokenTimer = () => {\n        this.clearRefreshTokenTimer();\n        const { onRefreshToken } = this.props;\n\n        if (!onRefreshToken) {\n            return undefined;\n        }\n        // access token has 10 minutes expiration time\n        // set 9.5 min interval threshold to refresh token before token expired\n        const intervalThresholdMS = REFRESH_TOKEN_INTERVAL_SECONDS * 1000;\n        const timer = setInterval(async () => {\n            const refreshedToken = await onRefreshToken();\n\n            if (refreshedToken) {\n                resetAuthorization(refreshedToken);\n            }\n        }, intervalThresholdMS);\n\n        return () => {\n            clearInterval(timer);\n        };\n    };\n\n    clearRefreshTokenTimer = () => {\n        if (this.refreshTokenTimer) {\n            this.refreshTokenTimer();\n        }\n    };\n\n    baseCls = 'dd-switch-module';\n}\n\nexport default DDSwitchModule;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            },\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport initMirageServer from '@Green-Dot-Corporation/eureka-lib-mock-utils/src/initMirageServer';\nimport ReactDOM from 'react-dom/client';\nimport DDSwitchModule from './DDSwitchModule';\nimport reportWebVitals from './reportWebVitals';\nimport registerRoutes from './mock/registerRoutes';\nimport './styles/index.scss';\n\nif (process.env.NODE_ENV === 'development') {\n    // Shutdown any existing instance of server to avoid multiple pretender\n    // instances error\n    if (window.server && typeof window.server.shutdown === 'function') {\n        window.server.shutdown();\n    }\n\n    // Create server and pass routes and other options\n    window.server = initMirageServer({\n        routes() {\n            registerRoutes(this);\n        },\n    });\n}\n\nconst rootElement = document.getElementById('root');\nconst root = ReactDOM.createRoot(rootElement);\n\nroot.render(\n    <React.StrictMode>\n        <p>This is a test page.</p>\n        <DDSwitchModule\n            accessToken=\"accessToken\"\n            brand=\"go2bank\"\n            accountIdentifier=\"accountIdentifier\"\n            applicationId=\"10001\"\n            env=\"QA\"\n            platform=\"BAAS\"\n            transactContainer=\"#root\"\n        />\n    </React.StrictMode>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// test debug GTM\nconst GTM_HEAD_SCRIPT = `\n(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\nnew Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\nj=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n})(window,document,'script','dataLayer','GTM-TNJSMSTF');\n`;\n\nconst GTM_BODY_SCRIPT = `<!-- Google Tag Manager (noscript) -->\n<noscript><iframe src=\"https://www.googletagmanager.com/ns.html?id=GTM-TNJSMSTF\"\nheight=\"0\" width=\"0\" style=\"display:none;visibility:hidden\"></iframe></noscript>\n<!-- End Google Tag Manager (noscript) -->`;\n\nconst addHeadScript = () => {\n    const gtmScript = GTM_HEAD_SCRIPT;\n    const head = document.getElementsByTagName('head')[0];\n    const script = document.createElement('script');\n    script.innerHTML = gtmScript;\n    head.insertBefore(script, head.firstChild);\n};\nconst addBodyScript = () => {\n    const scriptUrl = GTM_BODY_SCRIPT;\n    const body = document.getElementsByTagName('body')[0];\n\n    const script = document.createElement('noscript');\n    const iframe = document.createElement('iframe');\n    iframe.src = scriptUrl;\n    iframe.height = '0';\n    iframe.width = '0';\n    iframe.style.display = 'none';\n    iframe.style.visibility = 'hidden';\n    script.appendChild(iframe);\n    body.insertBefore(script, body.firstChild);\n};\nconst setupGTM = () => {\n    addHeadScript();\n    addBodyScript();\n};\n\nsetupGTM();\n"],"names":["DDSwitchModule","state","isLoading","hasError","isAutoSwitchEnabled","renderLandingPage","rest","props","Landing","fetchConfig","initI18nConfig","newState","getDDFeatureConfig","shouldShowLandingPage","setState","initialSetup","accessToken","applicationId","platform","env","brand","resetAuthorization","GlobalSettings","upperCaseBrand","programCode","PROGRAM_CODE","setProgramCode","setApplicationId","initializeAppConfig","setPlatform","toUpperCase","setEnv","setPrefixAPIUrl","initTranslationsOption","defaultTranslations","shouldLoadStrings","initTranslations","i18nResult","name","applyDesignToken","importCSS","initializeImageLibrary","initializeImages","defaultImages","imageLibrary","initialRefreshTokenTimer","clearRefreshTokenTimer","onRefreshToken","timer","setInterval","refreshedToken","REFRESH_TOKEN_INTERVAL_SECONDS","clearInterval","refreshTokenTimer","baseCls","this","transactContainer","id","BrowserRouter","EurekaErrorBoundary","calloutConfig","title","getTranslation","msg","buttonText","contextCls","isPageHeading","illustrationSrc","getImagePathForKey","IMAGE_KEYS","modalConfig","dialogContextCls","redirectURL","ROUTES_CONSTS","LoadingFlow","loadingStateLocale","Routes","Route","path","element","Bump","container","BumpAttemptDeclined","cleanGatewayHttpClientData","PureComponent","defaultProps","PLATFORM","BRAND","ENVIRONMENT","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootElement","document","getElementById","ReactDOM","render","accountIdentifier","reportWebVitals","head","getElementsByTagName","script","createElement","innerHTML","insertBefore","firstChild","addHeadScript","body","iframe","src","height","width","style","display","visibility","appendChild","addBodyScript"],"sourceRoot":""}