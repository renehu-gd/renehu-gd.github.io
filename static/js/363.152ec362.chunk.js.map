{"version":3,"file":"static/js/363.152ec362.chunk.js","mappings":"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","sources":["reportWebVitals.js","mock/ChatService/registerChatRoutes.js","mock/registerRoutes.js","ChatModule.js","bootstrap.js"],"sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            },\n        );\n    }\n};\n\nexport default reportWebVitals;\n","const registerChatRoutes = (server) => {\n    const serverConfig = server;\n\n    serverConfig.namespace = '/v1/api/gbr/';\n    const mockGetConfig = () => {\n        return {\n            hoop: '9AM-6PM',\n            isAgentOnline: false,\n            ewt: 10,\n            isLeaveAgentMessageEnabled: true,\n            leaveAgentMessage:\n                'Please leave a message and we will get back to you as soon as we can.',\n            userInactiveInterval: 10,\n            isSuccess: true,\n            errors: undefined,\n        };\n    };\n    serverConfig.get('config', mockGetConfig);\n\n    const mockLeaveMessage = () => {\n        return {\n            isSuccess: true,\n            errors: undefined,\n        };\n    };\n    serverConfig.post('leaveagentmessage', mockLeaveMessage);\n};\n\nexport default registerChatRoutes;\n","import registerChatRoutes from './ChatService/registerChatRoutes';\n\nconst registerRoutes = (server) => {\n    // server.passthrough();\n    registerChatRoutes(server);\n};\n\nexport default registerRoutes;\n","import cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport ChooseOptionWindow from './components/choose-option-window/ChooseOptionWindow';\nimport GenericMessage from './components/generic-message/GenericMessage';\nimport Hoop from './components/hoop/Hoop';\nimport LeaveMessage from './components/leave-message/LeaveMessage';\nimport ChatService from './service/ChatService';\nimport './styles/chat-module.scss';\n\nclass ChatModule extends PureComponent {\n    static propTypes = {\n        contextCls: PropTypes.string,\n        containerElement: PropTypes.object,\n        accountIdentifier: PropTypes.string,\n        email: PropTypes.string,\n        brand: PropTypes.string,\n        env: PropTypes.string,\n    };\n\n    state = {\n        shouldShowChooseOptionWindow: false,\n        shouldShowErrorPage: false,\n        shouldShowHoopWindow: false,\n        shouldShowLeaveMessageWindow: false,\n        shouldShowMessageSentWindow: false,\n    };\n\n    render() {\n        const {\n            shouldShowChooseOptionWindow,\n            shouldShowErrorPage,\n            shouldShowHoopWindow,\n            shouldShowLeaveMessageWindow,\n            shouldShowMessageSentWindow,\n        } = this.state;\n\n        return (\n            <>\n                {shouldShowChooseOptionWindow &&\n                    this.renderChooseOptionWindow()}\n                {shouldShowHoopWindow && this.renderHoopWindow()}\n                {shouldShowErrorPage && this.renderErrorPage()}\n                {shouldShowLeaveMessageWindow &&\n                    this.renderLeaveMessageWindow()}\n                {shouldShowMessageSentWindow && this.renderMessageSentWindow()}\n            </>\n        );\n    }\n\n    componentDidMount() {\n        this.setContainerElementStyle();\n        this.fetchConfig();\n        this.getUserInfo();\n    }\n\n    componentWillUnmount() {\n        this.restoreContainerElementStyle();\n    }\n\n    renderHoopWindow = () => {\n        const { contextCls, ...restProps } = this.props;\n        const { chatConfigs } = this.state;\n\n        return (\n            <Hoop\n                contextCls={cx(this.baseCls, contextCls)}\n                onLeaveMessage={this.handleLeaveMessage}\n                {...restProps}\n                {...chatConfigs}\n            />\n        );\n    };\n\n    renderChooseOptionWindow = () => {\n        const { contextCls, ...restProps } = this.props;\n        const { chatConfigs } = this.state;\n\n        return (\n            <ChooseOptionWindow\n                contextCls={cx(this.baseCls, contextCls)}\n                {...restProps}\n                {...chatConfigs}\n            />\n        );\n    };\n\n    renderErrorPage = () => {\n        const { contextCls, ...restProps } = this.props;\n\n        return (\n            <GenericMessage\n                contextCls={cx(this.baseCls, contextCls)}\n                icon=\"WarningAlert\"\n                windowTitle=\"Chat With an agent\"\n                headText=\"There was a problem connecting to chat support\"\n                subText=\"Please try again later.\"\n                {...restProps}\n            />\n        );\n    };\n\n    renderLeaveMessageWindow = () => {\n        const { contextCls, ...restProps } = this.props;\n        const { chatConfigs, userInfo } = this.state;\n\n        return (\n            <LeaveMessage\n                contextCls={cx(this.baseCls, contextCls)}\n                onMessageSent={this.handleMessageSent}\n                {...restProps}\n                {...chatConfigs}\n                {...userInfo}\n            />\n        );\n    };\n\n    renderMessageSentWindow = () => {\n        const { contextCls, ...restProps } = this.props;\n\n        return (\n            <GenericMessage\n                contextCls={cx(this.baseCls, contextCls)}\n                icon=\"Success\"\n                headText=\"Message sent\"\n                subText=\"We will get back to you as soon as we can.\"\n                {...restProps}\n            />\n        );\n    };\n\n    handleLeaveMessage = () => {\n        this.setState({\n            shouldShowHoopWindow: false,\n            shouldShowLeaveMessageWindow: true,\n        });\n    };\n\n    handleMessageSent = () => {\n        this.setState({\n            shouldShowLeaveMessageWindow: false,\n            shouldShowMessageSentWindow: true,\n        });\n    };\n\n    // TODO: replace when gateway api ready\n    getUserInfo() {\n        const userInfo = {\n            accountIdentifier: '10863a4e-4a14-496f-8b7a-e3efd573a995',\n            email: 'test@gmail.com',\n        };\n\n        this.setState({ userInfo });\n    }\n\n    async fetchConfig() {\n        const newState = {};\n\n        try {\n            const chatConfig = await ChatService.getChatConfig();\n            const { isAgentOnline, isSuccess, errors, ...restConfig } =\n                chatConfig;\n            newState.chatConfigs = restConfig;\n\n            if (isAgentOnline) {\n                newState.shouldShowChooseOptionWindow = true;\n                this.setState({ shouldShowChooseOptionWindow: true });\n            } else {\n                newState.shouldShowHoopWindow = true;\n            }\n\n            if (!isSuccess) {\n                newState.shouldShowErrorPage = true;\n            }\n        } catch (e) {\n            newState.shouldShowErrorPage = true;\n        } finally {\n            this.setState(newState);\n        }\n    }\n\n    setContainerElementStyle() {\n        const { containerElement } = this.props;\n\n        if (containerElement) {\n            this.setState({\n                originContainerElementPosition: containerElement.style.position,\n            });\n            containerElement.style.position = 'relative';\n        }\n    }\n\n    restoreContainerElementStyle() {\n        const { containerElement } = this.props;\n        const { originContainerElementPosition } = this.state;\n\n        if (containerElement && originContainerElementPosition) {\n            containerElement.style.position = originContainerElementPosition;\n        }\n    }\n\n    baseCls = 'web-chat-module';\n}\n\nexport default ChatModule;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport initMirageServer from '@Green-Dot-Corporation/eureka-lib-mock-utils/src/initMirageServer';\nimport reportWebVitals from './reportWebVitals';\nimport registerRoutes from './mock/registerRoutes';\nimport ChatModule from './ChatModule';\nimport './styles/index.scss';\n\nif (\n    process.env.NODE_ENV === 'development' ||\n    process.env.NODE_ENV === 'production'\n) {\n    // Shutdown any existing instance of server to avoid multiple pretender\n    // instances error\n    if (window.server && typeof window.server.shutdown === 'function') {\n        window.server.shutdown();\n    }\n\n    // Create server and pass routes and other options\n    window.server = initMirageServer({\n        routes() {\n            registerRoutes(this);\n        },\n    });\n}\nconst rootElement = document.getElementById('root');\nconst root = ReactDOM.createRoot(rootElement);\nroot.render(\n    <React.StrictMode>\n        <div>\n            Test Widget Page, when invoke the wiget, we should expose the\n            ChatModule only and set the containerElement to which element in the\n            existing page\n        </div>\n        <ChatModule containerElement={rootElement} />\n    </React.StrictMode>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"names":["onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","server","serverConfig","namespace","get","hoop","isAgentOnline","ewt","isLeaveAgentMessageEnabled","leaveAgentMessage","userInactiveInterval","isSuccess","errors","undefined","post","registerChatRoutes","ChatModule","state","shouldShowChooseOptionWindow","shouldShowErrorPage","shouldShowHoopWindow","shouldShowLeaveMessageWindow","shouldShowMessageSentWindow","renderHoopWindow","props","contextCls","restProps","chatConfigs","Hoop","cx","baseCls","onLeaveMessage","handleLeaveMessage","renderChooseOptionWindow","ChooseOptionWindow","renderErrorPage","GenericMessage","icon","windowTitle","headText","subText","renderLeaveMessageWindow","userInfo","LeaveMessage","onMessageSent","handleMessageSent","renderMessageSentWindow","setState","this","setContainerElementStyle","fetchConfig","getUserInfo","restoreContainerElementStyle","accountIdentifier","email","newState","ChatService","chatConfig","restConfig","containerElement","originContainerElementPosition","style","position","PureComponent","window","shutdown","initMirageServer","routes","registerRoutes","rootElement","document","getElementById","ReactDOM","render","reportWebVitals"],"sourceRoot":""}