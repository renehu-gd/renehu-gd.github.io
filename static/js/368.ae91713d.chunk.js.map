{"version":3,"file":"static/js/368.ae91713d.chunk.js","mappings":"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","sources":["reportWebVitals.js","ChatModule.js","bootstrap.js","../node_modules/react-dom/client.js"],"sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            },\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport {\n    getTranslation,\n    initTranslations,\n} from '@Green-Dot-Corporation/eureka-lib-i18n-utils';\nimport { LoadingFlow } from '@Green-Dot-Corporation/eureka-ui-loading';\nimport ChooseOptionWindow from './components/choose-option-window/ChooseOptionWindow';\nimport GenericMessage from './components/generic-message/GenericMessage';\nimport Hoop from './components/hoop/Hoop';\nimport Loading from './components/loading/Loading';\nimport VARIANTS_ICON from './components/generic-message/const/variantsConst';\n// Services\nimport * as TwilioService from './services/twilioService';\nimport { getChatConfig } from './services/chatService';\n// Utils\nimport { importCSS } from './utils/CSSImport';\nimport {\n    cleanData as cleanGatewayHttpClientData,\n    getEnv,\n    setAccessToken,\n    setApplicationId,\n    setEnv,\n    setPrefixAPIUrl,\n} from './utils/gatewayHttpClient';\nimport { getPlatform, setPlatform } from './utils/urlHelper';\n// Constants\nimport {\n    BRAND,\n    PLATFORM,\n    ENVIRONMENT,\n    PREFIX_URL_CONFIG,\n} from './const/urlConst';\nimport GlobalSettings from './utils/GlobalSettings';\n// Styles\nimport './styles/chat-module.scss';\n\nclass ChatModule extends PureComponent {\n    static propTypes = {\n        contextCls: PropTypes.string,\n        containerElement: PropTypes.object,\n        accountIdentifier: PropTypes.string,\n        accessToken: PropTypes.string,\n        brand: PropTypes.string,\n        applicationId: PropTypes.string,\n        env: PropTypes.string,\n        onChatWidgetClose: PropTypes.func,\n        platform: PropTypes.string,\n        loginUrl: PropTypes.string,\n    };\n\n    static defaultProps = {\n        onChatWidgetClose: () => Promise.resolve(),\n        platform: PLATFORM.BAAS,\n        brand: BRAND.GO2BANK,\n        env: ENVIRONMENT.PROD,\n    };\n\n    state = {\n        isLoading: true,\n        shouldShowChooseOptionWindow: false,\n        hasError: false,\n        shouldShowHoopWindow: false,\n        isI18nReady: false,\n    };\n\n    render() {\n        const { isDesignTokenApplied, isLoading, hasError, isI18nReady } =\n            this.state;\n\n        return (\n            isDesignTokenApplied &&\n            isI18nReady && (\n                <LoadingFlow\n                    contextCls={`${this.baseCls}__loading`}\n                    isLoading={isLoading}\n                    hasError={hasError}\n                    renderLoadingState={this.renderLoading}\n                    renderErrorState={this.renderErrorPage}\n                >\n                    {this.renderContent()}\n                </LoadingFlow>\n            )\n        );\n    }\n\n    componentDidMount() {\n        this.initI18n();\n        this.initialSetup();\n        this.setContainerElementStyle();\n        this.fetchConfig();\n        this.applyDesignToken();\n    }\n\n    componentWillUnmount() {\n        this.restoreContainerElementStyle();\n        this.destoryClient();\n        cleanGatewayHttpClientData();\n    }\n\n    renderContent = () => {\n        const { shouldShowChooseOptionWindow, shouldShowHoopWindow } =\n            this.state;\n        const { contextCls } = this.props;\n\n        return (\n            <div className={cx(this.baseCls, contextCls)}>\n                {shouldShowChooseOptionWindow &&\n                    this.renderChooseOptionWindow()}\n                {shouldShowHoopWindow && this.renderHoopWindow()}\n            </div>\n        );\n    };\n\n    renderHoopWindow = () => {\n        const { contextCls, ...rest } = this.props;\n        const { chatConfigs } = this.state;\n        const { hoop, isLeaveAgentMessageEnabled } = chatConfigs ?? {};\n\n        return (\n            <Hoop\n                {...rest}\n                contextCls={`${this.baseCls}__hoop`}\n                hoop={hoop}\n                isLeaveAgentMessageEnabled={isLeaveAgentMessageEnabled}\n                {...chatConfigs}\n            />\n        );\n    };\n\n    renderChooseOptionWindow = () => {\n        const { contextCls, ...rest } = this.props;\n        const { chatConfigs } = this.state;\n        const { ewt } = chatConfigs ?? {};\n\n        return (\n            <ChooseOptionWindow\n                {...rest}\n                contextCls={`${this.baseCls}__choose-option-window`}\n                ewt={ewt}\n                {...chatConfigs}\n            />\n        );\n    };\n\n    renderErrorPage = () => {\n        const { contextCls, ...rest } = this.props;\n        const windowTitle = getTranslation('chatModule.errorPage.title');\n        const headText = getTranslation('chatModule.errorPage.headText');\n        const subText = getTranslation('chatModule.errorPage.subText');\n\n        return (\n            <GenericMessage\n                {...rest}\n                contextCls={`${this.baseCls}__generic-message`}\n                icon={VARIANTS_ICON.WARNING}\n                windowTitle={windowTitle}\n                headText={headText}\n                subText={subText}\n            />\n        );\n    };\n\n    renderLoading = () => {\n        const { ...rest } = this.props;\n        const title = getTranslation('chatModule.loading.title');\n\n        return (\n            <Loading\n                {...rest}\n                contextCls={`${this.baseCls}__loading`}\n                title={title}\n                shouldShowCloseBtn\n            />\n        );\n    };\n\n    fetchConfig = async () => {\n        const newState = { isLoading: false };\n\n        try {\n            const chatConfig = await getChatConfig();\n            const { isAgentOnline, ...restConfig } = chatConfig;\n            newState.chatConfigs = restConfig;\n\n            if (isAgentOnline) {\n                newState.shouldShowChooseOptionWindow = true;\n            } else {\n                newState.shouldShowHoopWindow = true;\n            }\n        } catch (e) {\n            newState.hasError = true;\n        } finally {\n            this.setState(newState);\n        }\n    };\n\n    initialSetup = () => {\n        const { accessToken, applicationId, platform, env, brand } = this.props;\n\n        if (accessToken) {\n            setAccessToken(accessToken);\n        }\n\n        if (applicationId) {\n            setApplicationId(applicationId);\n        }\n\n        if (platform) {\n            setPlatform(platform.toUpperCase());\n        }\n\n        if (env) {\n            setEnv(env.toUpperCase());\n            GlobalSettings.Environment = env.toUpperCase();\n            setPrefixAPIUrl(PREFIX_URL_CONFIG[getPlatform()][getEnv()]);\n        }\n\n        if (brand) {\n            GlobalSettings.Brand = brand;\n        }\n    };\n\n    initI18n = async () => {\n        await initTranslations({\n            defaultTranslations: {\n                'en-US': () => import('./i18n/en-us.json'),\n            },\n            shouldLoadStrings: false,\n        });\n        this.setState({ isI18nReady: true });\n    };\n\n    applyDesignToken = () => {\n        const { brand } = this.props;\n        importCSS(brand);\n        this.setState({\n            isDesignTokenApplied: true,\n        });\n    };\n\n    setContainerElementStyle = () => {\n        const { containerElement } = this.props;\n\n        if (containerElement) {\n            this.setState({\n                originContainerElementPosition: containerElement.style.position,\n            });\n            containerElement.style.position = 'relative';\n        }\n    };\n\n    restoreContainerElementStyle = () => {\n        const { containerElement } = this.props;\n        const { originContainerElementPosition } = this.state;\n\n        if (containerElement && originContainerElementPosition) {\n            containerElement.style.position = originContainerElementPosition;\n        }\n    };\n\n    destoryClient = async () => {\n        await TwilioService.destoryClient();\n    };\n\n    baseCls = 'web-chat-module';\n}\n\nexport default ChatModule;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport initMirageServer from '@Green-Dot-Corporation/eureka-lib-mock-utils/src/initMirageServer';\nimport reportWebVitals from './reportWebVitals';\nimport registerRoutes from './mock/registerRoutes';\nimport ChatModule from './ChatModule';\nimport './styles/index.scss';\n\nif (process.env.NODE_ENV === 'development') {\n    // Shutdown any existing instance of server to avoid multiple pretender\n    // instances error\n    if (window.server && typeof window.server.shutdown === 'function') {\n        window.server.shutdown();\n    }\n\n    // Create server and pass routes and other options\n    window.server = initMirageServer({\n        routes() {\n            registerRoutes(this);\n        },\n    });\n}\nconst rootElement = document.getElementById('root');\nconst root = ReactDOM.createRoot(rootElement);\nconst handleCloseWindow = () => {\n    console.log('Chat window has been closed');\n};\nroot.render(\n    <React.StrictMode>\n        <div>\n            Test Widget Page, when invoke the wiget, we should expose the\n            ChatModule only and set the containerElement to which element in the\n            existing page\n        </div>\n        <ChatModule\n            containerElement={rootElement}\n            accessToken=\"ajkdjkljaklsjdfkljaklsdjfljksdajlf\"\n            brand=\"go2bank\"\n            accountIdentifier=\"adjkajsdlfjlkajsd\"\n            // loginUrl=\"https://secure.go2bank.com/account/auth/login\"\n            onChatWidgetClose={handleCloseWindow}\n            applicationId=\"10001\"\n            env=\"QA\"\n            platform=\"BAAS\"\n        />\n    </React.StrictMode>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n"],"names":["onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ChatModule","state","isLoading","shouldShowChooseOptionWindow","hasError","shouldShowHoopWindow","isI18nReady","renderContent","contextCls","props","className","cx","baseCls","renderChooseOptionWindow","renderHoopWindow","rest","chatConfigs","hoop","isLeaveAgentMessageEnabled","Hoop","ewt","ChooseOptionWindow","renderErrorPage","windowTitle","getTranslation","headText","subText","GenericMessage","icon","VARIANTS_ICON","renderLoading","title","Loading","shouldShowCloseBtn","fetchConfig","newState","getChatConfig","chatConfig","isAgentOnline","restConfig","setState","initialSetup","accessToken","applicationId","platform","env","brand","setAccessToken","setApplicationId","setPlatform","toUpperCase","setEnv","GlobalSettings","setPrefixAPIUrl","PREFIX_URL_CONFIG","getPlatform","getEnv","initI18n","initTranslations","defaultTranslations","shouldLoadStrings","applyDesignToken","importCSS","isDesignTokenApplied","setContainerElementStyle","containerElement","originContainerElementPosition","style","position","restoreContainerElementStyle","destoryClient","TwilioService","this","LoadingFlow","renderLoadingState","renderErrorState","cleanGatewayHttpClientData","PureComponent","defaultProps","onChatWidgetClose","Promise","resolve","PLATFORM","BRAND","ENVIRONMENT","rootElement","document","getElementById","ReactDOM","render","accountIdentifier","console","log","reportWebVitals","m","require","exports","createRoot","hydrateRoot"],"sourceRoot":""}