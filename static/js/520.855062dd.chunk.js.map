{"version":3,"file":"static/js/520.855062dd.chunk.js","mappings":"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","sources":["DDSwitchModule.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\nimport { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport {\n    getTranslation,\n    initTranslations,\n} from '@Green-Dot-Corporation/eureka-lib-i18n-utils';\nimport { resetAuthorization } from '@Green-Dot-Corporation/web-app-utils-api-lib';\nimport { LoadingFlow } from '@Green-Dot-Corporation/eureka-ui-loading';\nimport { withRouter } from '@Green-Dot-Corporation/eureka-lib-router-utils';\nimport { Routes, Route } from 'react-router-dom';\nimport Landing from './components/landing/Landing';\nimport Bump from './components/bump/Bump';\nimport Loading from './components/loading/Loading';\nimport DDForm from './components/dd-form/DDForm';\n// Services\nimport { getDDConfig } from './services/DDSwitchService';\n// Utils\nimport { importCSS } from './utils/CSSImport';\nimport {\n    cleanData as cleanGatewayHttpClientData,\n    setAccessToken,\n    setApplicationId,\n    setEnv,\n    setPrefixAPIUrl,\n} from './utils/gatewayHttpClient';\nimport { setPlatform } from './utils/urlHelper';\n// Constants\nimport GlobalSettings from './utils/GlobalSettings';\nimport { BRAND, PLATFORM, ENVIRONMENT } from './const/urlConst';\nimport { ROUTES_CONSTS } from './const/routesConst';\n// Styles\nimport './styles/dd-switch-module.scss';\n\nclass DDSwitchModule extends PureComponent {\n    static propTypes = {\n        contextCls: PropTypes.string,\n        accountIdentifier: PropTypes.string,\n        accessToken: PropTypes.string,\n        brand: PropTypes.string,\n        applicationId: PropTypes.string,\n        env: PropTypes.string,\n        onDDSwitchClose: PropTypes.func,\n        platform: PropTypes.string,\n    };\n\n    static defaultProps = {\n        onDDSwitchClose: () => Promise.resolve(),\n        platform: PLATFORM.BAAS,\n        brand: BRAND.GO2BANK,\n        env: ENVIRONMENT.PROD,\n    };\n\n    state = {\n        isLoading: true,\n        isI18nReady: false,\n        hasError: false,\n    };\n\n    render() {\n        const {\n            isDesignTokenApplied,\n            isI18nReady,\n            isLoading,\n            hasError,\n            isDDFeatureEnabled,\n        } = this.state;\n\n        const { contextCls, ...rest } = this.props;\n\n        return (\n            isI18nReady && (\n                <LoadingFlow\n                    contextCls={`${this.baseCls}__loading`}\n                    isLoading={isLoading}\n                    hasError={hasError}\n                    renderLoadingState={this.renderLoading}\n                    renderErrorState={this.renderErrorPage}\n                >\n                    <Routes>\n                        <Route path=\"/*\" element={<Landing />} />\n                        <Route\n                            path={ROUTES_CONSTS.LANDING}\n                            element={this.renderLandingPage()}\n                        />\n                        <Route path={ROUTES_CONSTS.BUMP} element={<Bump />} />\n                        <Route\n                            path={ROUTES_CONSTS.DD_FORM}\n                            element={<DDForm />}\n                        />\n                    </Routes>\n                </LoadingFlow>\n            )\n        );\n    }\n\n    componentDidMount() {\n        this.initialSetup();\n        this.fetchConfig();\n        this.applyDesignToken();\n    }\n\n    componentWillUnmount() {\n        cleanGatewayHttpClientData();\n    }\n\n    renderLandingPage = () => {\n        const { contextCls, ...rest } = this.props;\n        const { isDDFeatureEnabled } = this.state;\n\n        return (\n            <Landing\n                {...rest}\n                contextCls={`${this.baseCls}__landing`}\n                isDDFeatureEnabled={isDDFeatureEnabled}\n            />\n        );\n    };\n\n    renderLoading = () => {\n        const { ...rest } = this.props;\n        const title = getTranslation('ddSwitchModule.loading.title');\n\n        return (\n            <Loading\n                {...rest}\n                contextCls={`${this.baseCls}__loading`}\n                title={title}\n            />\n        );\n    };\n\n    renderErrorPage = () => {\n        const { contextCls, ...rest } = this.props;\n\n        return <h3>Error page</h3>;\n    };\n\n    fetchConfig = async () => {\n        await this.initI18nConfig();\n        const newState = { isLoading: false };\n\n        try {\n            const { isDDFeatureEnabled } = await getDDConfig();\n\n            newState.isDDFeatureEnabled = isDDFeatureEnabled;\n\n            if (isDDFeatureEnabled) {\n                newState.shouldShowLandingPage = true;\n            }\n        } catch (e) {\n            newState.hasError = true;\n        } finally {\n            this.setState(newState);\n        }\n    };\n\n    initialSetup = () => {\n        const { accessToken, applicationId, platform, env, brand } = this.props;\n\n        if (accessToken) {\n            resetAuthorization(accessToken);\n        }\n\n        if (applicationId) {\n            setApplicationId(applicationId);\n        }\n\n        if (brand) {\n            GlobalSettings.Brand = brand;\n        }\n\n        if (platform) {\n            setPlatform(platform.toUpperCase());\n        }\n\n        if (env) {\n            setEnv(env.toUpperCase());\n            GlobalSettings.Environment = env.toUpperCase();\n            setPrefixAPIUrl();\n        }\n    };\n\n    initI18nConfig = async () => {\n        const initTranslationsOption = {\n            defaultTranslations: {\n                'en-US': () => import('./i18n/en-us.json'),\n            },\n            shouldLoadStrings: false,\n        };\n        let i18nResult = await initTranslations(initTranslationsOption);\n        // Add this logic to avoid the i18n false positive return. The initTranslations will return promise successfully even the i18n is not ready.\n        // However in this case, the i18n name will be 'bound bound value' to indicate the load has not been ready. So in this case, we need to re-init i18n\n\n        if (i18nResult.name === 'bound bound value') {\n            i18nResult = await initTranslations(initTranslationsOption);\n        }\n        this.setState({ isI18nReady: true });\n    };\n\n    applyDesignToken = async () => {\n        const { brand } = this.props;\n        await importCSS(brand);\n        this.setState({\n            isDesignTokenApplied: true,\n        });\n    };\n\n    baseCls = 'dd-switch-module';\n}\n\nexport default withRouter(DDSwitchModule);\n"],"names":["DDSwitchModule","state","isLoading","isI18nReady","hasError","renderLandingPage","props","rest","contextCls","isDDFeatureEnabled","baseCls","renderLoading","title","getTranslation","renderErrorPage","fetchConfig","initI18nConfig","newState","getDDConfig","shouldShowLandingPage","setState","initialSetup","accessToken","applicationId","platform","env","brand","resetAuthorization","setApplicationId","GlobalSettings","setPlatform","toUpperCase","setEnv","setPrefixAPIUrl","initTranslationsOption","defaultTranslations","shouldLoadStrings","initTranslations","name","applyDesignToken","importCSS","isDesignTokenApplied","this","renderLoadingState","renderErrorState","Routes","Route","path","element","ROUTES_CONSTS","cleanGatewayHttpClientData","PureComponent","defaultProps","onDDSwitchClose","Promise","resolve","PLATFORM","BRAND","ENVIRONMENT","withRouter"],"sourceRoot":""}