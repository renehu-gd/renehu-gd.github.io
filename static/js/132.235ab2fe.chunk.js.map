{"version":3,"file":"static/js/132.235ab2fe.chunk.js","mappings":"+bAeMA,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GAoK0B,OApK1BA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KAWFC,MAAQ,CACJC,8BAA8B,EAC9BC,qBAAqB,EACrBC,sBAAsB,EACtBC,gBAAgB,GAJZ,EAiDRC,iBAAmB,WACf,MAAqC,EAAKC,MAAlCC,EAAR,EAAQA,WAAeC,GAAvB,YACQC,EAAgB,EAAKT,MAArBS,YAER,OACI,SAAC,KAAD,gBACIF,WAAYG,GAAAA,CAAG,EAAKC,QAASJ,GAC7BK,KAAMH,EAAYG,KAClBC,2BACIJ,EAAYI,4BAEZL,GACAC,KAGf,EAEDK,yBAA2B,WACvB,MAAqC,EAAKR,MAAlCC,EAAR,EAAQA,WAAeC,GAAvB,YACQC,EAAgB,EAAKT,MAArBS,YAER,OAEI,SAAC,KAAD,gBACIF,WAAYG,GAAAA,CAAG,EAAKC,QAASJ,GAC7BQ,IAAKN,EAAYM,KACbP,GACAC,KAGf,EAEDO,gBAAkB,WACd,MAAqC,EAAKV,MAAlCC,EAAR,EAAQA,WAAeC,GAAvB,YAEA,OACI,SAAC,KAAD,QACID,WAAYG,GAAAA,CAAG,EAAKC,QAASJ,GAC7BU,KAAK,eACLC,YAAY,qBACZC,SAAS,iDACTC,QAAQ,2BACJZ,KAGf,EA2DDG,QAAU,oBAFT,OAES,8BAlJV,WAGI,OAFiCU,KAAKrB,MAA9BsB,sBAEuBD,KAAKE,kBACvC,+BAED,WACI,IAAQC,EAAgBH,KAAKf,MAArBkB,YAEJA,IACAC,EAAAA,EAAAA,YAAgCD,GAGpCH,KAAKK,2BACLL,KAAKM,cACLN,KAAKO,qBACR,kCAED,WACIP,KAAKQ,iCACR,2BAED,WACI,IAAQtB,EAAec,KAAKf,MAApBC,WACR,EAIIc,KAAKrB,MAJT,EACIC,6BADJ,EAEIC,oBAFJ,EAGIC,qBAGJ,OACI,4CAMI,SAAC,IAAD,CAAYI,WAAYG,GAAAA,CAAGW,KAAKV,QAASJ,KAN7C,SASP,4DAiDD,mGACUuB,EAAW,GADrB,kBAIiCC,EAAAA,EAAAA,gBAJjC,OAIcC,EAJd,OAKgBC,EACJD,EADIC,cAAeC,EACnBF,EADmBE,UACnBF,EAD8BG,OAAWC,GALrD,OAMYJ,EANZ,GAOQF,EAASrB,YAAc2B,EAEnBH,EACAH,EAAS7B,8BAA+B,EAExC6B,EAAS3B,sBAAuB,EAG/B+B,IACDJ,EAAS5B,qBAAsB,GAhB3C,kDAmBQ4B,EAAS5B,qBAAsB,EAnBvC,yBAqBQmB,KAAKgB,SAASP,GArBtB,+HAjDC,IAiDD,iEAyBA,oGAEgBQ,EAAUjB,KAAKf,MAAfgC,MAFhB,SAGcC,EAAAA,EAAAA,OAAiBD,GAH/B,OAIQjB,KAAKgB,SAAS,CACVf,sBAAsB,IALlC,gDAQQkB,QAAQC,MAAM,KAAEC,SARxB,2GAzBA,IAyBA,sCAYA,WACI,IAAQC,EAAqBtB,KAAKf,MAA1BqC,iBAEJA,IACAtB,KAAKgB,SAAS,CACVO,+BAAgCD,EAAiBE,MAAMC,WAE3DH,EAAiBE,MAAMC,SAAW,cAEzC,0CAED,WACI,IAAQH,EAAqBtB,KAAKf,MAA1BqC,iBACAC,EAAmCvB,KAAKrB,MAAxC4C,+BAEJD,GAAoBC,IACpBD,EAAiBE,MAAMC,SAAWF,OAEzC,EAlKC7C,CAAmBgD,EAAAA,eAuKzB","sources":["ChatModule.js"],"sourcesContent":["/* eslint-disable react/no-unused-class-component-methods */\n/* eslint-disable no-unused-vars */\n/* eslint-disable react/no-unused-state */\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport ChooseOptionWindow from './components/choose-option-window/ChooseOptionWindow';\nimport GenericMessage from './components/generic-message/GenericMessage';\nimport Hoop from './components/hoop/Hoop';\nimport ChatWindow from './components/chat-window/ChatWindow';\nimport ChatService from './service/ChatService';\nimport './styles/chat-module.scss';\nimport CssImport from './util/CssImport';\nimport GatewayHttpClient from './util/GatewayHttpClient';\n\nclass ChatModule extends PureComponent {\n    static propTypes = {\n        contextCls: PropTypes.string,\n        containerElement: PropTypes.object,\n        accountIdentifier: PropTypes.string,\n        accessToken: PropTypes.string,\n        email: PropTypes.string,\n        brand: PropTypes.string,\n        env: PropTypes.string,\n    };\n\n    state = {\n        shouldShowChooseOptionWindow: false,\n        shouldShowErrorPage: false,\n        shouldShowHoopWindow: false,\n        shouldShowChat: true,\n    };\n\n    render() {\n        const { isDesignTokenApplied } = this.state;\n\n        return isDesignTokenApplied && this.renderContent();\n    }\n\n    componentDidMount() {\n        const { accessToken } = this.props;\n\n        if (accessToken) {\n            GatewayHttpClient.accessToken = accessToken;\n        }\n\n        this.setContainerElementStyle();\n        this.fetchConfig();\n        this.applyDesignToken();\n    }\n\n    componentWillUnmount() {\n        this.restoreContainerElementStyle();\n    }\n\n    renderContent() {\n        const { contextCls } = this.props;\n        const {\n            shouldShowChooseOptionWindow,\n            shouldShowErrorPage,\n            shouldShowHoopWindow,\n        } = this.state;\n\n        return (\n            <>\n                {/* {shouldShowChooseOptionWindow &&\n                    this.renderChooseOptionWindow()}\n                {shouldShowHoopWindow && this.renderHoopWindow()}\n                {shouldShowErrorPage && this.renderErrorPage()} */}\n                return (\n                <ChatWindow contextCls={cx(this.baseCls, contextCls)} />)\n            </>\n        );\n    }\n\n    renderHoopWindow = () => {\n        const { contextCls, ...restProps } = this.props;\n        const { chatConfigs } = this.state;\n\n        return (\n            <Hoop\n                contextCls={cx(this.baseCls, contextCls)}\n                hoop={chatConfigs.hoop}\n                isLeaveAgentMessageEnabled={\n                    chatConfigs.isLeaveAgentMessageEnabled\n                }\n                {...restProps}\n                {...chatConfigs}\n            />\n        );\n    };\n\n    renderChooseOptionWindow = () => {\n        const { contextCls, ...restProps } = this.props;\n        const { chatConfigs } = this.state;\n\n        return (\n            // TODO: this component should be changed after https://pd.nextestate.com/browse/GWA-187\n            <ChooseOptionWindow\n                contextCls={cx(this.baseCls, contextCls)}\n                ewt={chatConfigs.ewt}\n                {...restProps}\n                {...chatConfigs}\n            />\n        );\n    };\n\n    renderErrorPage = () => {\n        const { contextCls, ...restProps } = this.props;\n\n        return (\n            <GenericMessage\n                contextCls={cx(this.baseCls, contextCls)}\n                icon=\"WarningAlert\"\n                windowTitle=\"Chat with an agent\"\n                headText=\"There was a problem connecting to chat support\"\n                subText=\"Please try again later.\"\n                {...restProps}\n            />\n        );\n    };\n\n    async fetchConfig() {\n        const newState = {};\n\n        try {\n            const chatConfig = await ChatService.getChatConfig();\n            const { isAgentOnline, isSuccess, errors, ...restConfig } =\n                chatConfig;\n            newState.chatConfigs = restConfig;\n\n            if (isAgentOnline) {\n                newState.shouldShowChooseOptionWindow = true;\n            } else {\n                newState.shouldShowHoopWindow = true;\n            }\n\n            if (!isSuccess) {\n                newState.shouldShowErrorPage = true;\n            }\n        } catch (e) {\n            newState.shouldShowErrorPage = true;\n        } finally {\n            this.setState(newState);\n        }\n    }\n\n    async applyDesignToken() {\n        try {\n            const { brand } = this.props;\n            await CssImport.import(brand);\n            this.setState({\n                isDesignTokenApplied: true,\n            });\n        } catch (e) {\n            console.debug(e.message);\n        }\n    }\n\n    setContainerElementStyle() {\n        const { containerElement } = this.props;\n\n        if (containerElement) {\n            this.setState({\n                originContainerElementPosition: containerElement.style.position,\n            });\n            containerElement.style.position = 'relative';\n        }\n    }\n\n    restoreContainerElementStyle() {\n        const { containerElement } = this.props;\n        const { originContainerElementPosition } = this.state;\n\n        if (containerElement && originContainerElementPosition) {\n            containerElement.style.position = originContainerElementPosition;\n        }\n    }\n\n    baseCls = 'web-chat-module';\n}\n\nexport default ChatModule;\n"],"names":["ChatModule","state","shouldShowChooseOptionWindow","shouldShowErrorPage","shouldShowHoopWindow","shouldShowChat","renderHoopWindow","props","contextCls","restProps","chatConfigs","cx","baseCls","hoop","isLeaveAgentMessageEnabled","renderChooseOptionWindow","ewt","renderErrorPage","icon","windowTitle","headText","subText","this","isDesignTokenApplied","renderContent","accessToken","GatewayHttpClient","setContainerElementStyle","fetchConfig","applyDesignToken","restoreContainerElementStyle","newState","ChatService","chatConfig","isAgentOnline","isSuccess","errors","restConfig","setState","brand","CssImport","console","debug","message","containerElement","originContainerElementPosition","style","position","PureComponent"],"sourceRoot":""}