{"version":3,"file":"static/js/429.eae4fd5d.chunk.js","mappings":"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","sources":["ChatModule.js"],"sourcesContent":["import cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport ChooseOptionWindow from './components/choose-option-window/ChooseOptionWindow';\nimport GenericMessage from './components/generic-message/GenericMessage';\nimport Hoop from './components/hoop/Hoop';\nimport LeaveMessage from './components/leave-message/LeaveMessage';\nimport ChatService from './service/ChatService';\nimport './styles/chat-module.scss';\n\nclass ChatModule extends PureComponent {\n    static propTypes = {\n        contextCls: PropTypes.string,\n        containerElement: PropTypes.object,\n        accountIdentifier: PropTypes.string,\n        email: PropTypes.string,\n        brand: PropTypes.string,\n        env: PropTypes.string,\n    };\n\n    state = {\n        shouldShowChooseOptionWindow: false,\n        shouldShowErrorPage: false,\n        shouldShowHoopWindow: false,\n        shouldShowLeaveMessageWindow: false,\n        shouldShowMessageSentWindow: false,\n    };\n\n    render() {\n        const {\n            shouldShowChooseOptionWindow,\n            shouldShowErrorPage,\n            shouldShowHoopWindow,\n            shouldShowLeaveMessageWindow,\n            shouldShowMessageSentWindow,\n        } = this.state;\n\n        return (\n            <>\n                {shouldShowChooseOptionWindow &&\n                    this.renderChooseOptionWindow()}\n                {shouldShowHoopWindow && this.renderHoopWindow()}\n                {shouldShowErrorPage && this.renderErrorPage()}\n                {shouldShowLeaveMessageWindow &&\n                    this.renderLeaveMessageWindow()}\n                {shouldShowMessageSentWindow && this.renderMessageSentWindow()}\n            </>\n        );\n    }\n\n    componentDidMount() {\n        this.setContainerElementStyle();\n        this.fetchConfig();\n        this.getUserInfo();\n    }\n\n    componentWillUnmount() {\n        this.restoreContainerElementStyle();\n    }\n\n    renderHoopWindow = () => {\n        const { contextCls, ...restProps } = this.props;\n        const { chatConfigs } = this.state;\n\n        return (\n            <Hoop\n                contextCls={cx(this.baseCls, contextCls)}\n                onLeaveMessage={this.handleLeaveMessage}\n                {...restProps}\n                {...chatConfigs}\n            />\n        );\n    };\n\n    renderChooseOptionWindow = () => {\n        const { contextCls, ...restProps } = this.props;\n        const { chatConfigs } = this.state;\n\n        return (\n            <ChooseOptionWindow\n                contextCls={cx(this.baseCls, contextCls)}\n                {...restProps}\n                {...chatConfigs}\n            />\n        );\n    };\n\n    renderErrorPage = () => {\n        const { contextCls, ...restProps } = this.props;\n\n        return (\n            <GenericMessage\n                contextCls={cx(this.baseCls, contextCls)}\n                icon=\"WarningAlert\"\n                windowTitle=\"Chat With an agent\"\n                headText=\"There was a problem connecting to chat support\"\n                subText=\"Please try again later.\"\n                {...restProps}\n            />\n        );\n    };\n\n    renderLeaveMessageWindow = () => {\n        const { contextCls, ...restProps } = this.props;\n        const { chatConfigs, userInfo } = this.state;\n\n        return (\n            <LeaveMessage\n                contextCls={cx(this.baseCls, contextCls)}\n                onMessageSent={this.handleMessageSent}\n                {...restProps}\n                {...chatConfigs}\n                {...userInfo}\n            />\n        );\n    };\n\n    renderMessageSentWindow = () => {\n        const { contextCls, ...restProps } = this.props;\n\n        return (\n            <GenericMessage\n                contextCls={cx(this.baseCls, contextCls)}\n                icon=\"Success\"\n                headText=\"Message sent\"\n                subText=\"We will get back to you as soon as we can.\"\n                {...restProps}\n            />\n        );\n    };\n\n    handleLeaveMessage = () => {\n        this.setState({\n            shouldShowHoopWindow: false,\n            shouldShowLeaveMessageWindow: true,\n        });\n    };\n\n    handleMessageSent = () => {\n        this.setState({\n            shouldShowLeaveMessageWindow: false,\n            shouldShowMessageSentWindow: true,\n        });\n    };\n\n    // TODO: replace when gateway api ready\n    getUserInfo() {\n        const userInfo = {\n            accountIdentifier: '10863a4e-4a14-496f-8b7a-e3efd573a995',\n            email: 'test@gmail.com',\n        };\n\n        this.setState({ userInfo });\n    }\n\n    async fetchConfig() {\n        const newState = {};\n\n        try {\n            const chatConfig = await ChatService.getChatConfig();\n            const { isAgentOnline, isSuccess, errors, ...restConfig } =\n                chatConfig;\n            newState.chatConfigs = restConfig;\n\n            if (isAgentOnline) {\n                newState.shouldShowChooseOptionWindow = true;\n                this.setState({ shouldShowChooseOptionWindow: true });\n            } else {\n                newState.shouldShowHoopWindow = true;\n            }\n\n            if (!isSuccess) {\n                newState.shouldShowErrorPage = true;\n            }\n        } catch (e) {\n            newState.shouldShowErrorPage = true;\n        } finally {\n            this.setState(newState);\n        }\n    }\n\n    setContainerElementStyle() {\n        const { containerElement } = this.props;\n\n        if (containerElement) {\n            this.setState({\n                originContainerElementPosition: containerElement.style.position,\n            });\n            containerElement.style.position = 'relative';\n        }\n    }\n\n    restoreContainerElementStyle() {\n        const { containerElement } = this.props;\n        const { originContainerElementPosition } = this.state;\n\n        if (containerElement && originContainerElementPosition) {\n            containerElement.style.position = originContainerElementPosition;\n        }\n    }\n\n    baseCls = 'web-chat-module';\n}\n\nexport default ChatModule;\n"],"names":["ChatModule","state","shouldShowChooseOptionWindow","shouldShowErrorPage","shouldShowHoopWindow","shouldShowLeaveMessageWindow","shouldShowMessageSentWindow","renderHoopWindow","props","contextCls","restProps","chatConfigs","cx","baseCls","onLeaveMessage","handleLeaveMessage","renderChooseOptionWindow","renderErrorPage","icon","windowTitle","headText","subText","renderLeaveMessageWindow","userInfo","onMessageSent","handleMessageSent","renderMessageSentWindow","setState","this","setContainerElementStyle","fetchConfig","getUserInfo","restoreContainerElementStyle","accountIdentifier","email","newState","ChatService","chatConfig","isAgentOnline","isSuccess","errors","restConfig","containerElement","originContainerElementPosition","style","position","PureComponent"],"sourceRoot":""}