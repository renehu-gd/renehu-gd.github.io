{"version":3,"file":"static/js/481.c0824e16.chunk.js","mappings":"ueAsCMA,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GA8M0B,OA9M1BA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KAqBFC,MAAQ,CACJC,WAAW,EACXC,8BAA8B,EAC9BC,UAAU,EACVC,sBAAsB,EACtBC,aAAa,GALT,EAwCRC,cAAgB,WACZ,MACI,EAAKN,MADDE,EAAR,EAAQA,6BAA8BE,EAAtC,EAAsCA,qBAE9BG,EAAe,EAAKC,MAApBD,WAER,OACI,iBAAKE,UAAWC,IAAG,EAAKC,QAASJ,GAAjC,UACKL,GACG,EAAKU,2BACRR,GAAwB,EAAKS,qBAGzC,IAEDA,iBAAmB,WACf,MAAgC,EAAKL,MAAdM,GAAvB,EAAQP,YAAR,aACQQ,EAAgB,EAAKf,MAArBe,YACAC,EAAqCD,EAArCC,KAAMC,EAA+BF,EAA/BE,2BAEd,OACI,SAAC,KAAD,kBACQH,GADR,IAEIP,WAAU,UAAK,EAAKI,QAAV,UACVK,KAAMA,EACNC,2BAA4BA,GACxBF,GAGf,IAEDH,yBAA2B,WACvB,MAAgC,EAAKJ,MAAdM,GAAvB,EAAQP,YAAR,aACQQ,EAAgB,EAAKf,MAArBe,YACAG,EAAQH,EAARG,IAER,OACI,SAAC,KAAD,kBACQJ,GADR,IAEIP,WAAU,UAAK,EAAKI,QAAV,0BACVO,IAAKA,GACDH,GAGf,IAEDI,gBAAkB,WACd,MAAgC,EAAKX,MAAdM,GAAvB,EAAQP,YAAR,aACMa,GAAcC,EAAAA,EAAAA,IAAe,8BAC7BC,GAAWD,EAAAA,EAAAA,IAAe,iCAC1BE,GAAUF,EAAAA,EAAAA,IAAe,gCAE/B,OACI,SAAC,KAAD,kBACQP,GADR,IAEIP,WAAU,UAAK,EAAKI,QAAV,qBACVa,KAAMC,EAAAA,EAAAA,QACNL,YAAaA,EACbE,SAAUA,EACVC,QAASA,IAGpB,IAEDG,cAAgB,WACZ,IAAWZ,EAAX,iBAAoB,EAAKN,OACnBmB,GAAQN,EAAAA,EAAAA,IAAe,4BAE7B,OACI,SAAC,KAAD,kBACQP,GADR,IAEIP,WAAU,UAAK,EAAKI,QAAV,aACVgB,MAAOA,EACPC,oBAAkB,IAG7B,IAEDC,aAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,KAAAA,MAAc,sGACJC,EAAW,CAAE7B,WAAW,GADpB,mBAImB8B,EAAAA,EAAAA,MAJnB,OAIAC,EAJA,OAKEC,EAAiCD,EAAjCC,cAAkBC,GALpB,OAKmCF,EALnC,GAMNF,EAASf,YAAcmB,EAEnBD,EACAH,EAAS5B,8BAA+B,EAExC4B,EAAS1B,sBAAuB,EAX9B,kDAcN0B,EAAS3B,UAAW,EAdd,yBAgBN,EAAKgC,SAASL,GAhBR,+EAoBdM,aAAe,WACX,MAA6D,EAAK5B,MAA1D6B,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,SAAUC,EAA9C,EAA8CA,IAAKC,EAAnD,EAAmDA,MAE/CJ,IACAK,EAAAA,EAAAA,IAAeL,GAGfC,IACAK,EAAAA,EAAAA,IAAiBL,GAGjBC,IACAK,EAAAA,EAAAA,IAAYL,EAASM,eAGrBL,KACAM,EAAAA,EAAAA,IAAON,EAAIK,eACXE,EAAAA,EAAAA,YAA6BP,EAAIK,eACjCG,EAAAA,EAAAA,IAAgBC,EAAAA,IAAkBC,EAAAA,EAAAA,QAAeC,EAAAA,EAAAA,SAGjDV,IACAM,EAAAA,EAAAA,MAAuBN,EAE9B,IAEDW,UAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,KAAAA,MAAW,oGACDC,EAAAA,EAAAA,IAAiB,CACnBC,oBAAqB,CACjB,QAAS,kBAAM,kCAAN,GAEbC,mBAAmB,IALhB,OAOP,EAAKpB,SAAS,CAAE9B,aAAa,IAPtB,6CAUXmD,kBAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,KAAAA,MAAmB,gGACPf,EAAU,EAAKjC,MAAfiC,MADO,UAETgB,EAAAA,EAAAA,GAAUhB,GAFD,OAGf,EAAKN,SAAS,CACVuB,sBAAsB,IAJX,6CAQnBC,eAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,KAAAA,MAAgB,mGACNC,EAAAA,KADM,6CAIhBjD,QAAU,oBAnJT,OAmJS,8BAjLV,WACI,MACIkD,KAAK7D,MADD0D,EAAR,EAAQA,qBAAsBzD,EAA9B,EAA8BA,UAAWE,EAAzC,EAAyCA,SAAUE,EAAnD,EAAmDA,YAGnD,OACIqD,GACArD,IACI,SAAC,IAAD,CACIE,WAAU,UAAKsD,KAAKlD,QAAV,aACVV,UAAWA,EACXE,SAAUA,EACV2D,mBAAoBD,KAAKnC,cACzBqC,iBAAkBF,KAAK1C,gBAL3B,SAOK0C,KAAKvD,iBAIrB,kCAED,WACIuD,KAAKT,WACLS,KAAKzB,eACLyB,KAAKhC,cACLgC,KAAKL,kBACR,qCAED,WACIK,KAAKF,iBACLK,EAAAA,EAAAA,KACH,OA3DCjE,CAAmBkE,EAAAA,eAAnBlE,EAcKmE,aAAe,CAClBC,kBAAmB,kBAAMC,QAAQC,SAAd,EACnB9B,SAAU+B,EAAAA,GAAAA,KACV7B,MAAO8B,EAAAA,GAAAA,QACP/B,IAAKgC,EAAAA,GAAAA,MA+Lb,W","sources":["ChatModule.js"],"sourcesContent":["import { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport {\n    getTranslation,\n    initTranslations,\n} from '@Green-Dot-Corporation/eureka-lib-i18n-utils';\nimport { LoadingFlow } from '@Green-Dot-Corporation/eureka-ui-loading';\nimport ChooseOptionWindow from './components/choose-option-window/ChooseOptionWindow';\nimport GenericMessage from './components/generic-message/GenericMessage';\nimport Hoop from './components/hoop/Hoop';\nimport Loading from './components/loading/Loading';\nimport VARIANTS_ICON from './components/generic-message/const/variantsConst';\n// Services\nimport * as TwilioService from './services/twilioService';\nimport { getChatConfig } from './services/chatService';\n// Utils\nimport { importCSS } from './utils/CSSImport';\nimport {\n    cleanData as cleanGatewayHttpClientData,\n    getEnv,\n    setAccessToken,\n    setApplicationId,\n    setEnv,\n    setPrefixAPIUrl,\n} from './utils/gatewayHttpClient';\nimport { getPlatform, setPlatform } from './utils/urlHelper';\n// Constants\nimport GlobalSettings from './utils/GlobalSettings';\nimport {\n    BRAND,\n    PLATFORM,\n    ENVIRONMENT,\n    PREFIX_URL_CONFIG,\n} from './const/urlConst';\n// Styles\nimport './styles/chat-module.scss';\n\nclass ChatModule extends PureComponent {\n    static propTypes = {\n        contextCls: PropTypes.string,\n        containerElement: PropTypes.object,\n        accountIdentifier: PropTypes.string,\n        accessToken: PropTypes.string,\n        brand: PropTypes.string,\n        applicationId: PropTypes.string,\n        env: PropTypes.string,\n        onChatWidgetClose: PropTypes.func,\n        platform: PropTypes.string,\n        loginUrl: PropTypes.string,\n    };\n\n    static defaultProps = {\n        onChatWidgetClose: () => Promise.resolve(),\n        platform: PLATFORM.BAAS,\n        brand: BRAND.GO2BANK,\n        env: ENVIRONMENT.PROD,\n    };\n\n    state = {\n        isLoading: true,\n        shouldShowChooseOptionWindow: false,\n        hasError: false,\n        shouldShowHoopWindow: false,\n        isI18nReady: false,\n    };\n\n    render() {\n        const { isDesignTokenApplied, isLoading, hasError, isI18nReady } =\n            this.state;\n\n        return (\n            isDesignTokenApplied &&\n            isI18nReady && (\n                <LoadingFlow\n                    contextCls={`${this.baseCls}__loading`}\n                    isLoading={isLoading}\n                    hasError={hasError}\n                    renderLoadingState={this.renderLoading}\n                    renderErrorState={this.renderErrorPage}\n                >\n                    {this.renderContent()}\n                </LoadingFlow>\n            )\n        );\n    }\n\n    componentDidMount() {\n        this.initI18n();\n        this.initialSetup();\n        this.fetchConfig();\n        this.applyDesignToken();\n    }\n\n    componentWillUnmount() {\n        this.destoryClient();\n        cleanGatewayHttpClientData();\n    }\n\n    renderContent = () => {\n        const { shouldShowChooseOptionWindow, shouldShowHoopWindow } =\n            this.state;\n        const { contextCls } = this.props;\n\n        return (\n            <div className={cx(this.baseCls, contextCls)}>\n                {shouldShowChooseOptionWindow &&\n                    this.renderChooseOptionWindow()}\n                {shouldShowHoopWindow && this.renderHoopWindow()}\n            </div>\n        );\n    };\n\n    renderHoopWindow = () => {\n        const { contextCls, ...rest } = this.props;\n        const { chatConfigs } = this.state;\n        const { hoop, isLeaveAgentMessageEnabled } = chatConfigs;\n\n        return (\n            <Hoop\n                {...rest}\n                contextCls={`${this.baseCls}__hoop`}\n                hoop={hoop}\n                isLeaveAgentMessageEnabled={isLeaveAgentMessageEnabled}\n                {...chatConfigs}\n            />\n        );\n    };\n\n    renderChooseOptionWindow = () => {\n        const { contextCls, ...rest } = this.props;\n        const { chatConfigs } = this.state;\n        const { ewt } = chatConfigs;\n\n        return (\n            <ChooseOptionWindow\n                {...rest}\n                contextCls={`${this.baseCls}__choose-option-window`}\n                ewt={ewt}\n                {...chatConfigs}\n            />\n        );\n    };\n\n    renderErrorPage = () => {\n        const { contextCls, ...rest } = this.props;\n        const windowTitle = getTranslation('chatModule.errorPage.title');\n        const headText = getTranslation('chatModule.errorPage.headText');\n        const subText = getTranslation('chatModule.errorPage.subText');\n\n        return (\n            <GenericMessage\n                {...rest}\n                contextCls={`${this.baseCls}__generic-message`}\n                icon={VARIANTS_ICON.WARNING}\n                windowTitle={windowTitle}\n                headText={headText}\n                subText={subText}\n            />\n        );\n    };\n\n    renderLoading = () => {\n        const { ...rest } = this.props;\n        const title = getTranslation('chatModule.loading.title');\n\n        return (\n            <Loading\n                {...rest}\n                contextCls={`${this.baseCls}__loading`}\n                title={title}\n                shouldShowCloseBtn\n            />\n        );\n    };\n\n    fetchConfig = async () => {\n        const newState = { isLoading: false };\n\n        try {\n            const chatConfig = await getChatConfig();\n            const { isAgentOnline, ...restConfig } = chatConfig;\n            newState.chatConfigs = restConfig;\n\n            if (isAgentOnline) {\n                newState.shouldShowChooseOptionWindow = true;\n            } else {\n                newState.shouldShowHoopWindow = true;\n            }\n        } catch (e) {\n            newState.hasError = true;\n        } finally {\n            this.setState(newState);\n        }\n    };\n\n    initialSetup = () => {\n        const { accessToken, applicationId, platform, env, brand } = this.props;\n\n        if (accessToken) {\n            setAccessToken(accessToken);\n        }\n\n        if (applicationId) {\n            setApplicationId(applicationId);\n        }\n\n        if (platform) {\n            setPlatform(platform.toUpperCase());\n        }\n\n        if (env) {\n            setEnv(env.toUpperCase());\n            GlobalSettings.Environment = env.toUpperCase();\n            setPrefixAPIUrl(PREFIX_URL_CONFIG[getPlatform()][getEnv()]);\n        }\n\n        if (brand) {\n            GlobalSettings.Brand = brand;\n        }\n    };\n\n    initI18n = async () => {\n        await initTranslations({\n            defaultTranslations: {\n                'en-US': () => import('./i18n/en-us.json'),\n            },\n            shouldLoadStrings: false,\n        });\n        this.setState({ isI18nReady: true });\n    };\n\n    applyDesignToken = async () => {\n        const { brand } = this.props;\n        await importCSS(brand);\n        this.setState({\n            isDesignTokenApplied: true,\n        });\n    };\n\n    destoryClient = async () => {\n        await TwilioService.destoryClient();\n    };\n\n    baseCls = 'web-chat-module';\n}\n\nexport default ChatModule;\n"],"names":["ChatModule","state","isLoading","shouldShowChooseOptionWindow","hasError","shouldShowHoopWindow","isI18nReady","renderContent","contextCls","props","className","cx","baseCls","renderChooseOptionWindow","renderHoopWindow","rest","chatConfigs","hoop","isLeaveAgentMessageEnabled","ewt","renderErrorPage","windowTitle","getTranslation","headText","subText","icon","VARIANTS_ICON","renderLoading","title","shouldShowCloseBtn","fetchConfig","newState","getChatConfig","chatConfig","isAgentOnline","restConfig","setState","initialSetup","accessToken","applicationId","platform","env","brand","setAccessToken","setApplicationId","setPlatform","toUpperCase","setEnv","GlobalSettings","setPrefixAPIUrl","PREFIX_URL_CONFIG","getPlatform","getEnv","initI18n","initTranslations","defaultTranslations","shouldLoadStrings","applyDesignToken","importCSS","isDesignTokenApplied","destoryClient","TwilioService","this","renderLoadingState","renderErrorState","cleanGatewayHttpClientData","PureComponent","defaultProps","onChatWidgetClose","Promise","resolve","PLATFORM","BRAND","ENVIRONMENT"],"sourceRoot":""}