{"version":3,"file":"static/js/941.8570d7e1.chunk.js","mappings":"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","sources":["DDSwitchModule.js","reportWebVitals.js","bootstrap.js","../node_modules/react-dom/client.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\nimport { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport {\n    getTranslation,\n    initTranslations,\n} from '@Green-Dot-Corporation/eureka-lib-i18n-utils';\nimport { resetAuthorization } from '@Green-Dot-Corporation/web-app-utils-api-lib';\nimport { LoadingFlow } from '@Green-Dot-Corporation/eureka-ui-loading';\nimport { withRouter } from '@Green-Dot-Corporation/eureka-lib-router-utils';\nimport { Routes, Route } from 'react-router-dom';\nimport Landing from './components/landing/Landing';\nimport Bump from './components/bump/Bump';\nimport Loading from './components/loading/Loading';\nimport DDForm from './components/dd-form/DDForm';\n// Services\nimport { getDDConfig } from './services/DDSwitchService';\n// Utils\nimport { importCSS } from './utils/CSSImport';\nimport {\n    cleanData as cleanGatewayHttpClientData,\n    setAccessToken,\n    setApplicationId,\n    setEnv,\n    setPrefixAPIUrl,\n} from './utils/gatewayHttpClient';\nimport { setPlatform } from './utils/urlHelper';\n// Constants\nimport GlobalSettings from './utils/GlobalSettings';\nimport { BRAND, PLATFORM, ENVIRONMENT } from './const/urlConst';\nimport { ROUTES_CONSTS } from './const/routesConst';\n// Styles\nimport './styles/dd-switch-module.scss';\n\nclass DDSwitchModule extends PureComponent {\n    static propTypes = {\n        contextCls: PropTypes.string,\n        accountIdentifier: PropTypes.string,\n        accessToken: PropTypes.string,\n        brand: PropTypes.string,\n        applicationId: PropTypes.string,\n        env: PropTypes.string,\n        onDDSwitchClose: PropTypes.func,\n        platform: PropTypes.string,\n    };\n\n    static defaultProps = {\n        onDDSwitchClose: () => Promise.resolve(),\n        platform: PLATFORM.BAAS,\n        brand: BRAND.GO2BANK,\n        env: ENVIRONMENT.PROD,\n    };\n\n    state = {\n        isLoading: true,\n        isI18nReady: false,\n        hasError: false,\n    };\n\n    render() {\n        const {\n            isDesignTokenApplied,\n            isI18nReady,\n            isLoading,\n            hasError,\n            isDDFeatureEnabled,\n        } = this.state;\n\n        const { contextCls, ...rest } = this.props;\n\n        return (\n            isI18nReady && (\n                <LoadingFlow\n                    contextCls={`${this.baseCls}__loading`}\n                    isLoading={isLoading}\n                    hasError={hasError}\n                    renderLoadingState={this.renderLoading}\n                    renderErrorState={this.renderErrorPage}\n                >\n                    <Routes>\n                        <Route path=\"/*\" element={<Landing />} />\n                        <Route\n                            path={ROUTES_CONSTS.LANDING}\n                            element={this.renderLandingPage()}\n                        />\n                        <Route path={ROUTES_CONSTS.BUMP} element={<Bump />} />\n                        <Route\n                            path={ROUTES_CONSTS.DD_FORM}\n                            element={<DDForm />}\n                        />\n                    </Routes>\n                </LoadingFlow>\n            )\n        );\n    }\n\n    componentDidMount() {\n        this.initialSetup();\n        this.fetchConfig();\n        this.applyDesignToken();\n    }\n\n    componentWillUnmount() {\n        cleanGatewayHttpClientData();\n    }\n\n    renderLandingPage = () => {\n        const { contextCls, ...rest } = this.props;\n        const { isDDFeatureEnabled } = this.state;\n\n        return (\n            <Landing\n                {...rest}\n                contextCls={`${this.baseCls}__landing`}\n                isDDFeatureEnabled={isDDFeatureEnabled}\n            />\n        );\n    };\n\n    renderLoading = () => {\n        const { ...rest } = this.props;\n        const title = getTranslation('ddSwitchModule.loading.title');\n\n        return (\n            <Loading\n                {...rest}\n                contextCls={`${this.baseCls}__loading`}\n                title={title}\n            />\n        );\n    };\n\n    renderErrorPage = () => {\n        const { contextCls, ...rest } = this.props;\n\n        return <h3>Error page</h3>;\n    };\n\n    fetchConfig = async () => {\n        await this.initI18nConfig();\n        const newState = { isLoading: false };\n\n        try {\n            const { isDDFeatureEnabled } = await getDDConfig();\n\n            newState.isDDFeatureEnabled = isDDFeatureEnabled;\n\n            if (isDDFeatureEnabled) {\n                newState.shouldShowLandingPage = true;\n            }\n        } catch (e) {\n            newState.hasError = true;\n        } finally {\n            this.setState(newState);\n        }\n    };\n\n    initialSetup = () => {\n        const { accessToken, applicationId, platform, env, brand } = this.props;\n\n        if (accessToken) {\n            resetAuthorization(accessToken);\n        }\n\n        if (applicationId) {\n            setApplicationId(applicationId);\n        }\n\n        if (brand) {\n            GlobalSettings.Brand = brand;\n        }\n\n        if (platform) {\n            setPlatform(platform.toUpperCase());\n        }\n\n        if (env) {\n            setEnv(env.toUpperCase());\n            GlobalSettings.Environment = env.toUpperCase();\n            setPrefixAPIUrl();\n        }\n    };\n\n    initI18nConfig = async () => {\n        const initTranslationsOption = {\n            defaultTranslations: {\n                'en-US': () => import('./i18n/en-us.json'),\n            },\n            shouldLoadStrings: false,\n        };\n        let i18nResult = await initTranslations(initTranslationsOption);\n        // Add this logic to avoid the i18n false positive return. The initTranslations will return promise successfully even the i18n is not ready.\n        // However in this case, the i18n name will be 'bound bound value' to indicate the load has not been ready. So in this case, we need to re-init i18n\n\n        if (i18nResult.name === 'bound bound value') {\n            i18nResult = await initTranslations(initTranslationsOption);\n        }\n        this.setState({ isI18nReady: true });\n    };\n\n    applyDesignToken = async () => {\n        const { brand } = this.props;\n        await importCSS(brand);\n        this.setState({\n            isDesignTokenApplied: true,\n        });\n    };\n\n    baseCls = 'dd-switch-module';\n}\n\nexport default withRouter(DDSwitchModule);\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            },\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport initMirageServer from '@Green-Dot-Corporation/eureka-lib-mock-utils/src/initMirageServer';\nimport { BrowserRouter } from 'react-router-dom';\nimport ReactDOM from 'react-dom/client';\nimport DDSwitchModule from './DDSwitchModule';\nimport reportWebVitals from './reportWebVitals';\nimport registerRoutes from './mock/registerRoutes';\nimport './styles/index.scss';\n\nif (process.env.NODE_ENV === 'development') {\n    // Shutdown any existing instance of server to avoid multiple pretender\n    // instances error\n    if (window.server && typeof window.server.shutdown === 'function') {\n        window.server.shutdown();\n    }\n\n    // Create server and pass routes and other options\n    window.server = initMirageServer({\n        routes() {\n            registerRoutes(this);\n        },\n    });\n}\n\nconst rootElement = document.getElementById('root');\nconst root = ReactDOM.createRoot(rootElement);\nconst handleCloseWindow = () => {\n    console.debug('DD Switch has been closed');\n};\n\nroot.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <p>This is a test page.</p>\n            <DDSwitchModule\n                accessToken=\"accessToken\"\n                brand=\"go2bank\"\n                accountIdentifier=\"accountIdentifier\"\n                onDDSwitchClose={handleCloseWindow}\n                applicationId=\"10001\"\n                env=\"QA\"\n                platform=\"BAAS\"\n            />\n        </BrowserRouter>\n    </React.StrictMode>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n"],"names":["DDSwitchModule","state","isLoading","isI18nReady","hasError","renderLandingPage","props","rest","contextCls","isDDFeatureEnabled","Landing","baseCls","renderLoading","title","getTranslation","Loading","renderErrorPage","fetchConfig","initI18nConfig","newState","getDDConfig","shouldShowLandingPage","setState","initialSetup","accessToken","applicationId","platform","env","brand","resetAuthorization","setApplicationId","GlobalSettings","setPlatform","toUpperCase","setEnv","setPrefixAPIUrl","initTranslationsOption","defaultTranslations","shouldLoadStrings","initTranslations","name","applyDesignToken","importCSS","isDesignTokenApplied","this","LoadingFlow","renderLoadingState","renderErrorState","Routes","Route","path","element","ROUTES_CONSTS","Bump","DDForm","cleanGatewayHttpClientData","PureComponent","defaultProps","onDDSwitchClose","Promise","resolve","PLATFORM","BRAND","ENVIRONMENT","withRouter","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootElement","document","getElementById","ReactDOM","render","BrowserRouter","accountIdentifier","console","debug","reportWebVitals","m","require","exports","createRoot","hydrateRoot"],"sourceRoot":""}