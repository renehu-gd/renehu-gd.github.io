{"version":3,"file":"static/js/989.1601a4b4.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/construct.js","../node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","../node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","../node_modules/@remix-run/router/history.ts","../node_modules/@remix-run/router/utils.ts","../node_modules/@babel/runtime/helpers/esm/toArray.js","../node_modules/@remix-run/router/router.ts","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js"],"sourcesContent":["import setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { warning, invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type MutationFormMethod = \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormMethod = \"get\" | MutationFormMethod;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<Omit<R, ImmutableRouteKey>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  detectErrorBoundary: DetectErrorBoundaryFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        hasErrorBoundary: detectErrorBoundary(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        hasErrorBoundary: detectErrorBoundary(route),\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          detectErrorBoundary,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        const starParam = params[star];\n\n        // Apply the splat\n        return starParam;\n      }\n\n      const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n\n        if (optional === \"?\") {\n          return param == null ? \"\" : param;\n        }\n\n        if (param == null) {\n          invariant(false, `Missing \":${key}\" param`);\n        }\n\n        return param;\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  DetectErrorBoundaryFunction,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  MutationFormMethod,\n  ShouldRevalidateFunction,\n  RouteManifest,\n  ImmutableRouteKey,\n  ActionFunction,\n  LoaderFunction,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n\nconst defaultDetectErrorBoundary = (route: AgnosticRouteObject) =>\n  Boolean(route.hasErrorBoundary);\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let detectErrorBoundary =\n    init.detectErrorBoundary || defaultDetectErrorBoundary;\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    detectErrorBoundary,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    !initialMatches.some((m) => m.route.lazy) &&\n    // And we have to either have no loaders or have been provided hydrationData\n    (!initialMatches.some((m) => m.route.loader) || init.hydrationData != null);\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              deleteBlocker(blockerKey!);\n              updateState({ blockers: new Map(router.state.blockers) });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (state.initialized) {\n      return router;\n    }\n\n    let lazyMatches = state.matches.filter((m) => m.route.lazy);\n\n    if (lazyMatches.length === 0) {\n      // Kick off initial data load if needed.  Use Pop to avoid modifying history\n      startNavigation(HistoryAction.Pop, state.location);\n      return router;\n    }\n\n    // Load lazy modules, then kick off initial data load if needed\n    let lazyPromises = lazyMatches.map((m) =>\n      loadLazyRouteModule(m.route, detectErrorBoundary, manifest)\n    );\n    Promise.all(lazyPromises).then(() => {\n      let initialized =\n        !state.matches.some((m) => m.route.loader) ||\n        init.hydrationData != null;\n      if (initialized) {\n        // We already have required loaderData so we can just set initialized\n        updateState({ initialized: true });\n      } else {\n        // We still need to kick off initial data loads\n        startNavigation(HistoryAction.Pop, state.location);\n      }\n    });\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers: new Map(state.blockers),\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey!);\n          updateState({ blockers: new Map(state.blockers) });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n    if (\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        detectErrorBoundary,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission\n      ? submission\n      : loadingNavigation.formMethod &&\n        loadingNavigation.formAction &&\n        loadingNavigation.formData &&\n        loadingNavigation.formEncType\n      ? {\n          formMethod: loadingNavigation.formMethod,\n          formAction: loadingNavigation.formAction,\n          formData: loadingNavigation.formData,\n          formEncType: loadingNavigation.formEncType,\n        }\n      : undefined;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      init.basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach((rf) =>\n      fetchControllers.set(rf.key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = matchRoutes(routesToUse, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      detectErrorBoundary,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      init.basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      detectErrorBoundary,\n      router.basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n    // Check if this an absolute external redirect that goes to a new origin\n    if (\n      ABSOLUTE_URL_REGEX.test(redirect.location) &&\n      isBrowser &&\n      typeof window?.location !== \"undefined\"\n    ) {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename =\n        stripBasename(url.pathname, init.basename || \"/\") == null;\n\n      if (window.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData,\n      };\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      submission &&\n      isMutationMethod(submission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...submission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          detectErrorBoundary,\n          router.basename\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, request.signal),\n            f.match,\n            f.matches,\n            manifest,\n            detectErrorBoundary,\n            router.basename\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    state.blockers.set(key, newBlocker);\n    updateState({ blockers: new Map(state.blockers) });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    inFlightDataRoutes = newRoutes;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let detectErrorBoundary =\n    opts?.detectErrorBoundary || defaultDetectErrorBoundary;\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    detectErrorBoundary,\n    undefined,\n    manifest\n  );\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\" && method !== \"options\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        detectErrorBoundary,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          detectErrorBoundary,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData);\n  // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  let defaultShouldRevalidate =\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        defaultShouldRevalidate ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some((m) => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({ key, ...f, matches: null, match: null });\n      return;\n    }\n\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        ...f,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        ...f,\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: Parameters<ShouldRevalidateFunction>[0]\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  detectErrorBoundary: DetectErrorBoundaryFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to detectErrorBoundary\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `detectErrorBoundary` function to set the `hasErrorBoundary` route\n    // property since the logic will differ between frameworks.\n    hasErrorBoundary: detectErrorBoundary({ ...routeToUpdate }),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  detectErrorBoundary: DetectErrorBoundaryFunction,\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([\n          runHandler(handler),\n          loadLazyRouteModule(match.route, detectErrorBoundary, manifest),\n        ]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, detectErrorBoundary, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname: new URL(request.url).pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else {\n      invariant<Function>(\n        handler,\n        `Could not find the ${type} to run on the \"${match.route.id}\" route`\n      );\n\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let resolvedLocation = resolveTo(\n          location,\n          routePathnames,\n          new URL(request.url).pathname\n        );\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod {\n  return validRequestMethods.has(method as FormMethod);\n}\n\nfunction isMutationMethod(method?: string): method is MutationFormMethod {\n  return validMutationMethods.has(method as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}"],"names":["_construct","Parent","args","Class","isNativeReflectConstruct","Reflect","construct","a","push","apply","instance","Function","bind","setPrototypeOf","prototype","arguments","_wrapNativeSuper","_cache","Map","undefined","fn","toString","call","indexOf","TypeError","has","get","set","Wrapper","getPrototypeOf","this","constructor","Object","create","value","enumerable","writable","configurable","Action","ResultType","PopStateEventType","createMemoryHistory","options","entries","initialEntries","initialIndex","v5Compat","map","entry","index","createMemoryLocation","state","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","createURL","URL","encodeLocation","path","parsePath","search","hash","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","createBrowserHistory","getUrlBasedHistory","window","globalHistory","usr","createHashHistory","substr","base","document","querySelector","href","getAttribute","url","hashIndex","slice","invariant","message","Error","cond","console","warn","e","getHistoryState","idx","current","random","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","history","getIndex","handlePop","origin","replaceState","addEventListener","removeEventListener","historyState","pushState","error","assign","immutableRouteKeys","Set","convertRoutesToDataRoutes","routes","detectErrorBoundary","parentPath","manifest","route","treePath","id","join","children","isIndexRoute","indexRoute","hasErrorBoundary","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","sort","b","score","siblings","every","i","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","matches","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","caseSensitive","startsWith","joinPaths","concat","computeScore","forEach","includes","explodeOptionalSegments","exploded","segments","split","arr","arrayWithHoles","iterableToArray","unsupportedIterableToArray","nonIterableRest","first","rest","isOptional","endsWith","required","restExploded","result","subpath","paramRe","isSplat","s","initialScore","some","filter","reduce","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","params","pathnameBase","normalizePathname","generatePath","originalPath","array","keyMatch","optional","param","pattern","paramNames","regexpSource","_","paramName","RegExp","compilePath","matcher","captureGroups","memo","splatValue","decodeURIComponent","safelyDecodeURIComponent","decodeURI","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","pop","resolvePathname","normalizeSearch","normalizeHash","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","from","isEmptyPath","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","json","data","init","responseInit","status","headers","Headers","Response","AbortedDeferredError","DeferredData","reject","pendingKeysSet","subscribers","deferredKeys","Array","isArray","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","done","add","promise","race","then","onSettle","catch","defineProperty","aborted","delete","emit","settledKey","subscriber","subscribe","cancel","abort","v","k","resolve","size","_tracked","isTrackedPromise","_error","_data","unwrapTrackedPromise","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","isBrowser","createElement","isServer","defaultDetectErrorBoundary","Boolean","createRouter","inFlightDataRoutes","dataRoutes","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","router","pendingNavigationController","initialized","m","lazy","loader","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","updateState","newState","completeNavigation","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","deleteBlocker","getSavedScrollPosition","navigate","opts","normalizeNavigateOptions","submission","currentLocation","userReplace","blockerKey","shouldBlockNavigation","updateBlocker","startNavigation","pendingError","startUninterruptedRevalidation","saveScrollPosition","routesToUse","loadingNavigation","overrideNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","findNearestBoundary","handleAction","actionOutput","shortCircuited","pendingActionData","pendingActionError","_extends","Request","handleLoaders","interruptActiveLoads","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","activeSubmission","getMatchesToLoad","matchesToLoad","revalidatingFetchers","rf","fetcher","revalidatingFetcher","callLoadersAndMaybeResolveData","results","loaderResults","fetcherResults","findRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","requestMatches","setFetcherError","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","isFetchActionRedirect","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","_temp","revalidate","redirectLocation","_isFetchActionRedirect","_window","isDifferentBasename","redirectHistoryAction","currentMatches","fetchersToLoad","all","f","resolveDeferredResults","abortFetcher","deleteFetcher","markFetchersDone","doneKeys","landedId","yeetedKeys","newBlocker","blocker","_ref2","blockerFunction","predicate","cancelledRouteIds","dfd","userMatches","createUseMatchesMatch","y","initialize","lazyMatches","lazyPromises","loadLazyRouteModule","enableScrollRestoration","positions","getPosition","getKey","fetch","handleFetcherAction","handleFetcherLoader","dispose","clear","getBlocker","_internalFetchControllers","_internalActiveDeferreds","_internalSetRoutes","newRoutes","Symbol","isFetcher","isSubmissionNavigation","isValidMethod","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","getLoaderMatchesUntilBoundary","boundaryId","boundaryMatches","findIndex","values","currentUrl","nextUrl","defaultShouldRevalidate","navigationMatches","currentLoaderData","currentMatch","isNew","isMissingData","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","isNewRouteInstance","fetcherMatches","fetcherMatch","currentPath","loaderMatch","arg","shouldRevalidate","routeChoice","lazyRoute","lazyRouteProperty","routeToUpdate","routeUpdates","staticRouteValue","isPropertyStaticallyDefined","isStaticRequest","isRouteRequest","requestContext","runHandler","handler","onReject","context","resultType","isResponse","protocol","isSameBasename","activeMatches","resolvedLocation","response","contentType","text","statusCode","deferred","_result$init","toUpperCase","body","URLSearchParams","File","name","processRouteLoaderData","foundError","loaderHeaders","newLoaderData","mergedLoaderData","hasOwnProperty","reverse","find","_temp4","errorMessage","isRevalidatingLoader","unwrap","resolveData","unwrappedData","getAll","handle","pathMatches","_arrayWithHoles","_createForOfIteratorHelper","o","allowArrayLike","it","iterator","F","_e","err","normalCompletion","didErr","step","next","_e2","_nonIterableRest","_slicedToArray","_i","_s","_arr","_n","_d"],"sourceRoot":""}